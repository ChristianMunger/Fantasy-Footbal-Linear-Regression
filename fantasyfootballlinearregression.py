# -*- coding: utf-8 -*-
"""FantasyFootballLinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N3hESUgF1of2SFtsuMYTdfIzk3X-WibS
"""

import pandas as pd

df = pd.read_csv('/content/data_cleaned.csv')

df.head()

df = df.iloc[:, 1:]
# iloc is a row indexer and column indexer

"""# New Section"""

df.head()

df.columns

df['season'].min(), df['season'].max()

import numpy as np

df = df.groupby(['player_id', 'tm', 'player', 'pos', 'season'], as_index=False)\
    .agg({
      'offensive_snapcount': np.sum,
      'offensive_snapcount_percentage': np.mean,
      'passing_rating': np.mean,
      'passing_yds': np.sum,
      'passing_td': np.sum,
      'passing_att': np.sum,
      'receiving_yds': np.sum,
      'receiving_td': np.sum,
      'receiving_rec': np.sum,
      'receiving_tar': np.sum,
      'rushing_att': np.sum,
      'standard_fantasy_points': np.sum,
      'ppr_fantasy_points': np.sum,
      'half_ppr_fantasy_points': np.sum
})

df.head()

df.plot(x = 'season', y = 'offensive_snapcount', kind = 'scatter')
#no data before 2012

df = df.loc[df['season'] >= 2012]
df.shape

pd.set_option('chained_assignment', None)

lag_features = [
                'rushing_att',
                'receiving_tar',
                'offensive_snapcount',
                'offensive_snapcount_percentage',
                'ppr_fantasy_points',
                'passing_rating',
                'passing_att',
                'passing_td'
]

for lag in range(1,6):

  shifted = df.groupby('player_id').shift(lag)
  
  for column in lag_features:
    df[f'lag_{column}_{lag}'] = shifted[column]

df = df.fillna(-1)

df.head()

df.corr()['ppr_fantasy_points']

#correlations between lag features and fantasy points

df.loc[df['pos'] == 'WR'].corr()['ppr_fantasy_points']
#pprfantasypoints correlations for wr
#lagpprfantasypoints, offensive snapcounts and lagreivingtargets

wr_df = df.loc[(df['pos'] == 'WR') & (df['season'] < 2019)]

wr_df.shape

import seaborn as sns

sns.residplot(x=wr_df['lag_offensive_snapcount_1'], y=wr_df['ppr_fantasy_points'])
#set minimum threshold due to a lot of values around 0

wr_df = wr_df.loc[wr_df['lag_offensive_snapcount_1'] > 50]

wr_df.shape

sns.residplot(x=wr_df['lag_receiving_tar_1'], y=wr_df['ppr_fantasy_points'])

sns.residplot(x=wr_df['lag_ppr_fantasy_points_1'], y=wr_df['ppr_fantasy_points'])

X =  wr_df[[
    'lag_receiving_tar_1', 'lag_offensive_snapcount_1', 'lag_ppr_fantasy_points_1'
]].values

y = wr_df['ppr_fantasy_points'].values

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 10)

lr = LinearRegression()

lr.fit(X_train, y_train)

y_pred = lr.predict(X_test)

y_pred

mean_absolute_error(y_test, y_pred)
#On average our model is off by about 47 fantasy points total or about 2.93 a game

pd.set_option('display.max_rows', None)

wr_df_pred = df.loc[
                    (df['pos'] == 'WR') & (df['offensive_snapcount'] > 50) & (df['season'] == 2019),
                    ['player', 'receiving_tar', 'offensive_snapcount', 'ppr_fantasy_points']                 
]

wr_df_pred['predicted_2020'] = lr.predict(
    wr_df_pred[['receiving_tar', 'offensive_snapcount', 'ppr_fantasy_points']].values
)

wr_df_pred.sort_values(by = 'predicted_2020', ascending=False).head(100)

#linear model predicitions for wide receivers for 2020